# 2022-7-1
    01. chp05
        1) 5.3 list:
            raw: 0, 4, 9
            new: 0, 5, 9
        2) 5.4 tuple:
            raw: >>> x[0], x[5], x[-1]/(0, 4, 9)
            new: >>> x[0], x[5], x[-1]/(0, 5, 9)
            raw: MyScore(lang=10, math=1, sci=1)
            new: MyScore(lang=100, math=80, sci=60)
        3) 5.6 set:
            raw: >>> set1/{}
            new: >>> set1/set()
            raw: {1,2, 3} .. set1.add(5)/{1, 2, 3, 5}
            new: {1, 2, 3} .. set1.add(5)/set1/{1, 2, 3, 5)
            raw: set1.difference(set2)/set1/..
            new: set1.difference(set2)/..
        4) 5.7 func
            raw: >>> help(fun5)
            new: >>> help(sum_power)
            raw: >>> fun5(**b)/.../ypeError:
            new: >>> fun5(**b)/.../TypeError:
            raw: type(sum_power)../function
            new: type(sum_power)../<class 'function'>
            raw: fun(3)../3, 1
            new: fun(3)../3 1
            raw: fun(x=3)../3, 1
            new: fun(x=3)../3 1
            raw: fun(y=2, 3)../3, 2
            new: fun(y=2, 3)../3 2
        5) 5.9 obj_rec
            raw: x =100, y = 100
            new: x =100; y = 100
            raw: x1 =1000, y1 = 1000
            new: x1 =1000; y1 = 1000
            raw: 指向不同的对象
            new: 指向不同的对象(有时也会分配相同地址！)
            raw: a1.__weakref
            new: a1.__weakref__
            raw:  >>> c()        		# 调用无效弱引用，返回值None/None
            new:  >>> c()        		# 调用无效弱引用，无返回值/
            raw: ({'name': 'Wang', 'score': [95, 90, 85]}, {'name': 'Li', 'score': [95, 90, 85]})
            new: ({'name': 'Wang', 'score': [100, 90, 85]}, {'name': 'Li', 'score': [100, 90, 85]})
            raw: ({'name': 'Wang', 'score': [100, 90, 85]}, {'name': 'Wang', 'score': [100, 90, 85]})
            new: ({'name': 'Wang', 'score': [100, 90, 85]}, {'name': 'Sun', 'score': [100, 90, 85]})
            raw: ({'name': 'Wang', 'score': [300, 90, 85]}, {'name': 'Wang', 'score': [300, 90, 85]})
            new: ({'name': 'Sun', 'score': [300, 90, 85]}, {'name': 'Wang', 'score': [300, 90, 85]})


    a1. appendix-b
        1) command result: dc.Decimal() --> Decimal()
        2) missing right bracket: Decimal(..,
        3） ROUND_CEILING: 向正无穷大靠近舍入..., round(dc.Decimal('-1.14'), 1) is Decimal('-1.1')
        4) 重新更改Rounding叙述

    a2. appendix-d
        1) blank_operand: 括号内的冒号，视为运算符，前后不留空格。 删去：ham[lower + offset : upper + offset]
        2) 以单下划线结束的变量: 合并行， 更改：如使用“import *”，

    a3. appendix-e
        1) re.compile: 示例
            re.match(cp,‘person is a word.’)
            error: 'person'
            correct: <re.Match object; span=(0, 6), match='person'>
        2) re.escape: 示例
            re.escape('exp.com [1]{2}(3)')
            raw: 'exp\\.com\\ \\[1\\]\\{2\\}\\(3\\)'
            print: 'exp\.com\ \[1\]\{2\}\(3\)'
        3) REO对象搜索方法search
            raw: 搜索字符串，找到
            new: 搜索字符串string，找到

            raw: <re.Match object; span=(5, 9), match='B-02'>
            new: <re.Match object; span=(2, 6), match='B-02'>
        4) REO.match
            raw: ps1 ='\w{3}'
            new: ps2 ='\w{3}'
        5) REO.sub
            raw: ..repeat split example
            new: 更新为'aaa'替换'abc'
        6) REO.flab-groupindex(groupindex（分组索引字典）)
            raw: groupindexs
            new: groupindex
        7) MO: MO.attr-mo5
            raw: mo5.group(0), mo.groups()
            new: mo5.group(0), mo5.groups()
        8) MO: MO.attr
            raw: mo1.pos/0,12   mo1.endpos/0,12
            new: mo1.pos/0      mo1.endpos/14
        9) MO: MO.attr
            raw: mo5.group(0), mo5.groups()/'ab', ()
            new: mo5.group(0), mo5.groups()/('ab', ())
        10) MO: MO.attr 多一个括号
            raw: mo8 = re.search('[a-z]{2})','ab')
            new: mo8 = re.search('[a-z]{2}','ab')
        11) MO: MO.attr 在>>>和ipython中显示结果不同
            raw: re.compile(r'[0-9]{3}\w{2}', re.UNICODE)
            new: re.compile(r'[0-9]{3}\w{2}')
        12) MO: MO.method expand 数字反向引用
            raw: mo16.expand(r'\g<first_group>\2c\3')
            new: mo16.expand(r'\g<first_group>\\2c')
        13) Group: (?#...)
            raw: result.group()
            new: result.group()/'BBC'
        14) Group:
            raw: r.group('g1')/'汉字'
            new: r.group('g2')/'汉字'
        15) Group:
            raw: re.match('(?P<g1>[a-zA-Z]{3})\w{2}(?P=g1)', 'AbC汉字abc')/None
            new: re.match('(?P<g1>[a-zA-Z]{3})\w{2}(?P=g1)', 'AbC汉字abc')/
        16) Group:
            raw: re.match('Isaac (?=Newton)', 'Isaac newton')/None
            new: re.match('Isaac (?=Newton)', 'Isaac newton')/
        17) Group:
            raw: (? < ! ...)    /None
            new: (? < ! ...)    /
        18) Group:
            raw: re.search('(<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)','user@host.com')/
                 <re.Match object; span=(0, 15), match='user@host.com'>
            new: re.search('(<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)','user@host.com')/
                 <re.Match object; span=(0, 13), match='user@host.com'>
        19) Greedy:
            raw: re.search(ps1,'|a|bbb|c|')/span(0, 6)
            new: re.search(ps1,'|a|bbb|c|')/span(0, 9)
            raw: re.search(ps4,'|a|bbb|c|')/span(0, 3)
            new: re.search(ps4,'|a|bbb|c|')/span(0, 4)
            raw: re.search(ps6,'<a>b<c>')/span(0, 7)
            new: re.search(ps6,'<a>b<c>')/span(0, 3)
            raw: re.search(ps7,..)/span(0, 7)
            new: re.search(ps7,..)/span(0, 8)

