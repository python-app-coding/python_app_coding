# 2022-7-1
    1. appendix-b
        1) command result: dc.Decimal() --> Decimal()
        2) missing right bracket: Decimal(..,
        3） ROUND_CEILING: 向正无穷大靠近舍入..., round(dc.Decimal('-1.14'), 1) is Decimal('-1.1')
        4) 重新更改Rounding叙述

    2. appendix-d
        1) blank_operand: 括号内的冒号，视为运算符，前后不留空格。 删去：ham[lower + offset : upper + offset]
        2) 以单下划线结束的变量: 合并行， 更改：如使用“import *”，

    3. appendix-e
        1) re.compile: 示例
            re.match(cp,‘person is a word.’)
            error: 'person'
            correct: <re.Match object; span=(0, 6), match='person'>
        2) re.escape: 示例
            re.escape('exp.com [1]{2}(3)')
            raw: 'exp\\.com\\ \\[1\\]\\{2\\}\\(3\\)'
            print: 'exp\.com\ \[1\]\{2\}\(3\)'
        3) REO对象搜索方法search
            raw: 搜索字符串，找到
            new: 搜索字符串string，找到

            raw: <re.Match object; span=(5, 9), match='B-02'>
            new: <re.Match object; span=(2, 6), match='B-02'>
        4) REO.match
            raw: ps1 ='\w{3}'
            new: ps2 ='\w{3}'
        5) REO.sub
            raw: ..repeat split example
            new: 更新为'aaa'替换'abc'
        6) REO.flab-groupindex(groupindex（分组索引字典）)
            raw: groupindexs
            new: groupindex
        7) MO: MO.attr-mo5
            raw: mo5.group(0), mo.groups()
            new: mo5.group(0), mo5.groups()
        8) MO: MO.attr
            raw: mo1.pos/0,12   mo1.endpos/0,12
            new: mo1.pos/0      mo1.endpos/14
        9) MO: MO.attr
            raw: mo5.group(0), mo5.groups()/'ab', ()
            new: mo5.group(0), mo5.groups()/('ab', ())
        10) MO: MO.attr 多一个括号
            raw: mo8 = re.search('[a-z]{2})','ab')
            new: mo8 = re.search('[a-z]{2}','ab')
        11) MO: MO.attr 在>>>和ipython中显示结果不同
            raw: re.compile(r'[0-9]{3}\w{2}', re.UNICODE)
            new: re.compile(r'[0-9]{3}\w{2}')
        12) MO: MO.method expand 数字反向引用
            raw: mo16.expand(r'\g<first_group>\2c\3')
            new: mo16.expand(r'\g<first_group>\\2c')
        13) Group: (?#...)
            raw: result.group()
            new: result.group()/'BBC'
        14) Group:
            raw: r.group('g1')/'汉字'
            new: r.group('g2')/'汉字'
        15) Group:
            raw: re.match('(?P<g1>[a-zA-Z]{3})\w{2}(?P=g1)', 'AbC汉字abc')/None
            new: re.match('(?P<g1>[a-zA-Z]{3})\w{2}(?P=g1)', 'AbC汉字abc')/
        16) Group:
            raw: re.match('Isaac (?=Newton)', 'Isaac newton')/None
            new: re.match('Isaac (?=Newton)', 'Isaac newton')/
        17) Group:
            raw: (? < ! ...)    /None
            new: (? < ! ...)    /
        18) Group:
            raw: re.search('(<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)','user@host.com')/
                 <re.Match object; span=(0, 15), match='user@host.com'>
            new: re.search('(<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)','user@host.com')/
                 <re.Match object; span=(0, 13), match='user@host.com'>
        19) Greedy:
            raw: re.search(ps1,'|a|bbb|c|')/span(0, 6)
            new: re.search(ps1,'|a|bbb|c|')/span(0, 9)
            raw: re.search(ps4,'|a|bbb|c|')/span(0, 3)
            new: re.search(ps4,'|a|bbb|c|')/span(0, 4)
            raw: re.search(ps6,'<a>b<c>')/span(0, 7)
            new: re.search(ps6,'<a>b<c>')/span(0, 3)
            raw: re.search(ps7,..)/span(0, 7)
            new: re.search(ps7,..)/span(0, 8)

