# coding: utf8

"""
◎ start([group])
◎ end([group])
返回分组匹配中子串的开始、结束位置。返回值为0时，指匹配了整个字符串，返回值为-1时，指存在分组但未匹配。
对于一个匹配对象m和一个匹配分组g，匹配子串m.group(g)可以表示为原串的位置切片。二者是相等的。
如果分组g匹配了空串，m.start(g)和m.end(g)是相等的。
如果分组名称或编号不存在，在m.start和m.end()中引用则会引发IndexError异常。

>>> import re

【示例】
>>> mo19 = re.match('(?P<first_name>[0-9]{3})(\s*)(\w+)', '123ab')
>>> mo19.groups()
('123', '', 'ab')

# 原字符串位置切片与group参数引用等同
>>> g ='first_name'
>>> mo19.string[mo19.start(g):mo19.end(g)]== mo19.group(g)
True

# 空匹配的分组，起始位置等于结束位置
>>> mo19.start(2), mo19.end(2)
(3, 3)


span([group])
返回匹配分组开始和结束位置为元素的2元元组，如果分组没有匹配则返回值为（-1，-1）。
引用0分组时（group=0），为整个匹配，即匹配整个原串的情况。

【示例】
>>> mo20 = re.match('(?P<first_name>[0-9]{3})(\s*)(\w+)|([0-9]+)', '123ab')
>>> mo20.groups()	# 第2组为空匹配，第3组为未匹配
('123', '', 'ab', None)
>>> mo20.span(0)		# 整个匹配的情况
(0, 5)
>>> mo20.span(1)		# 正常匹配的分组
(0, 3)
>>> mo20.span(2)		# 空匹配分组，起始位置等于结束位置
(3, 3)
>>> mo20.span(4)		# 未匹配的分组
(-1, -1)
"""