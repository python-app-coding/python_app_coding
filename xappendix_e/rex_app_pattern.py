# coding: utf8

"""
常用典型正则表达式

>>> import re

◎ 变量名检测。
【模式】
'[a-zA-Z\_][0-9a-zA-Z\_]*'
【示例】
# 合法变量名
>>> re.match('[a-zA-Z\_][0-9a-zA-Z\_]*', '_a').group(0)
'_a'

◎ 首尾空白字符检测。
【模式】
'^\s*|\s*$'
'(^\s*)|(\s*$)'
【示例】
# 去除首尾的空格
>>> re.sub('^\s*|\s*$','','a_a')
'a_a'

◎ 邮箱检测。
【不含汉字邮箱名称的检测模式】
'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$'
【含汉字邮箱名称检测模式】
'^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$'
【示例】
>>> ps ='^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$'	# 普通检测
>>> re.match(ps, '123456@126.com') is not None
True
>>> re.match(ps, '&&&@126.com') is not None
False
>>> re.match(ps, '信箱1@126.com') is not None
False
>>> ps ='^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$'	# 允许汉字名称
>>> re.match(ps, '信箱1@126.com') is not None
True

◎ 密码检测：
【模式】
'^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$'
【示例】
# 没有大写字母
>>> re.match('^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$', 'sun12_3a') is not None
False

# 长度小于8
>>> re.match('^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$', 'Sum123') is not None
False

# 长度大于10
>>> re.match('^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$', 'Sum12345678') is not None
False

◎ 身份证号检测
【15位身份证号检测模式】
'^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$'
【18位身份证号检测模式】
'^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$'
【示例】
>>> p15 = '^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$'
>>> re.match(p15, '370102198806062516')     # 匹配成功
<re.Match object; span=(0, 18), match='370102198806062516'>

>>> p18 = '^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$'
>>> re.match(p18, '3701021988060625')		# 长度小于18, 匹配不成功


◎ 域名检测
【模式】
'^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$'
【示例】
>>> pdns = '^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$'
>>> re.match(pdns, 'www.baidu.com')
<re.Match object; span=(0, 13), match='www.baidu.com'>

◎ IPv4地址
【简单匹配模式】
'\d+(\.\d+){3}'
【复杂匹配模式】
'^([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])(\.([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])){3}$'
【示例】
>>> pip1 = '\d+(\.\d+){3}'
>>> re.match(pip1, '10.1.1.128')
<re.Match object; span=(0, 10), match='10.1.1.128'>
>>> re.match(pip1, '1000.301.1.128')
<re.Match object; span=(0, 14), match='1000.301.1.128'>

>>> pip2 = '^([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])(\.([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])){3}$'
>>> re.match(pip2, '10.1.1.128')
<re.Match object; span=(0, 10), match='10.1.1.128'>
"""